name: "GitHub Actions job_id parser"
description: "GitHub Action to get the current workflow run's job_id"
inputs:
  github_token:
    description: "GITHUB_TOKEN to use GitHub API v3"
    required: false
    default: ${{ github.token }}
  repository:
    description: "target GitHub repository"
    required: false
    default: ${{ github.repository }}
  run_id:
    description: "run_id of target workflow run"
    required: false
    default: ${{ github.run_id }}
  job_name:
    description: "job_name of tartget workflow jobs"
    required: true
  per_page:
    description: "Results per page (max 100) of target workflow run"
    required: false
    default: 30
outputs:
  job_id:
    description: "job_id of target workflow jobs"
    value: ${{ steps.request.outputs.job_id }}
  html_url:
    description: "html_url of target workflow jobs"
    value: ${{ steps.request.outputs.html_url }}

branding:
  icon: "link"
  color: "blue"

runs:
  using: 'composite'
  steps:
    - name: Parse job_id
      id: request
      env:
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_REPOSITORY: ${{ inputs.repository }}
        INPUT_RUN_ID: ${{ inputs.run_id }}
        INPUT_JOB_NAME: ${{ inputs.job_name }}
        INPUT_PER_PAGE: ${{ inputs.per_page }}
      shell: pwsh
      run: |
        Write-Host "Repository : ${{ inputs.repository }}"
        Write-Host "Env Repository : $env:INPUT_REPOSITORY"
        $GITHUB_API = "repos/$env:INPUT_REPOSITORY/actions/runs/$env:INPUT_RUN_ID/jobs"
        $url = "https://api.github.com/$GITHUB_API?per_page=$env:INPUT_PER_PAGE"
        Write-Host "Request API: $GITHUB_API"  # 打印出拼接的 URL，检查其正确性
        Write-Host "Request URL: $url"  # 打印出拼接的 URL，检查其正确性
        
        $response = Invoke-RestMethod -Uri $url -Headers @{
            Authorization = "Bearer $env:INPUT_GITHUB_TOKEN"
            Accept = "application/vnd.github+json"
            "X-GitHub-Api-Version" = "2022-11-28"
        }
        
        # 输出响应的内容，帮助调试
        Write-Host "Response: $response"
        if ($response -like "*Resource not accessible by integration*") {
            Write-Error "Error: Resource not accessible by integration"
            exit 1
        }

        $totalCount = $response.total_count
        $job = $response.jobs | Where-Object { $_.name -eq $env:INPUT_JOB_NAME } | Select-Object -First 1

        if (-not $job) {
            Write-Error "Parse error: Job with name '$env:INPUT_JOB_NAME' not found. Total count is $totalCount. 'job_name' or 'per_page' might be wrong. See https://github.com/Tiryoh/gha-jobid-action/blob/main/README.md#inputs"
            exit 1
        }

        $job_id = $job.id
        $html_url = $job.html_url

        "job_id=$job_id" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "html_url=$html_url" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
